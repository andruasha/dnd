# Generated by Django 4.0.3 on 2023-06-15 08:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('Author_ID', models.IntegerField(primary_key=True, serialize=False)),
                ('Organization', models.TextField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Archetypes',
            fields=[
                ('Archetypes_ID', models.TextField(primary_key=True, serialize=False)),
                ('Class', models.TextField()),
                ('Archetypes_Description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Armor',
            fields=[
                ('Armor_ID', models.TextField(primary_key=True, serialize=False)),
                ('Armor_Description', models.TextField(null=True)),
                ('Armor_Class', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Habitat',
            fields=[
                ('Habitat_ID', models.TextField(primary_key=True, serialize=False)),
                ('Habitat_Description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Item_Type',
            fields=[
                ('Item_Type_ID', models.TextField(primary_key=True, serialize=False)),
                ('Item_Type_Description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('Language_ID', models.TextField(primary_key=True, serialize=False)),
                ('Language_Description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('School_ID', models.TextField(primary_key=True, serialize=False)),
                ('School_Description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('Size_ID', models.TextField(primary_key=True, serialize=False)),
                ('Size_Description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('Species_ID', models.TextField(primary_key=True, serialize=False)),
                ('Species_Description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Worldview',
            fields=[
                ('Worldview_ID', models.TextField(primary_key=True, serialize=False)),
                ('Worldview_Description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Spells',
            fields=[
                ('Spell_ID', models.TextField(primary_key=True, serialize=False)),
                ('Spell_Level', models.IntegerField()),
                ('Time_Application', models.TextField(null=True)),
                ('Distance', models.TextField(null=True)),
                ('Duration', models.TextField(null=True)),
                ('Components', models.TextField()),
                ('Description', models.TextField(null=True)),
                ('Archetypes', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='home.archetypes')),
                ('School', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='home.school')),
                ('Spell_Author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Items',
            fields=[
                ('Item_ID', models.TextField(primary_key=True, serialize=False)),
                ('Item_Subtype', models.TextField(null=True)),
                ('Item_Rarity', models.TextField()),
                ('Item_Setting', models.TextField(null=True)),
                ('Item_Price', models.TextField(null=True)),
                ('Item_Description', models.TextField(null=True)),
                ('Item_Author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('Item_Type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='home.item_type')),
            ],
        ),
        migrations.CreateModel(
            name='Bestiary',
            fields=[
                ('Bestiary_ID', models.TextField(primary_key=True, serialize=False)),
                ('Subspecies', models.TextField(null=True)),
                ('Hits', models.IntegerField()),
                ('Speed', models.TextField()),
                ('Characteristics', models.TextField()),
                ('Resistance_Damage', models.TextField(null=True)),
                ('Immunity_Damage', models.TextField(null=True)),
                ('Vulnerability_Damage', models.TextField(null=True)),
                ('Immunity_State', models.TextField(null=True)),
                ('Salvage', models.TextField(null=True)),
                ('Skills', models.TextField(null=True)),
                ('Senses', models.TextField(null=True)),
                ('Danger', models.IntegerField()),
                ('Description', models.TextField(null=True)),
                ('Armor_ID', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='home.armor')),
                ('Bestiary_Author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('Habitat_ID', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='home.habitat')),
                ('Language_ID', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='home.language')),
                ('Size_ID', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='home.size')),
                ('Species_ID', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='home.species')),
                ('Worldview_ID', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='home.worldview')),
            ],
        ),
    ]
